// Code generated by MockGen. DO NOT EDIT.
// Source: repository_interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	domain "ecommerce-microservice/product/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(product domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", product)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), product)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), id)
}

// FetchAllProduct mocks base method.
func (m *MockProductRepository) FetchAllProduct(offset, limit int, filter string) ([]domain.Product, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllProduct", offset, limit, filter)
	ret0, _ := ret[0].([]domain.Product)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAllProduct indicates an expected call of FetchAllProduct.
func (mr *MockProductRepositoryMockRecorder) FetchAllProduct(offset, limit, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllProduct", reflect.TypeOf((*MockProductRepository)(nil).FetchAllProduct), offset, limit, filter)
}

// FetchProductByID mocks base method.
func (m *MockProductRepository) FetchProductByID(id uuid.UUID) (*domain.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchProductByID", id)
	ret0, _ := ret[0].(*domain.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchProductByID indicates an expected call of FetchProductByID.
func (mr *MockProductRepositoryMockRecorder) FetchProductByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchProductByID", reflect.TypeOf((*MockProductRepository)(nil).FetchProductByID), id)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(id uuid.UUID, request domain.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), id, request)
}

// MockCategoryRepository is a mock of CategoryRepository interface.
type MockCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepositoryMockRecorder
}

// MockCategoryRepositoryMockRecorder is the mock recorder for MockCategoryRepository.
type MockCategoryRepositoryMockRecorder struct {
	mock *MockCategoryRepository
}

// NewMockCategoryRepository creates a new mock instance.
func NewMockCategoryRepository(ctrl *gomock.Controller) *MockCategoryRepository {
	mock := &MockCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepository) EXPECT() *MockCategoryRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockCategoryRepository) CreateCategory(category domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockCategoryRepositoryMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).CreateCategory), category)
}

// DeleteCategory mocks base method.
func (m *MockCategoryRepository) DeleteCategory(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockCategoryRepositoryMockRecorder) DeleteCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockCategoryRepository)(nil).DeleteCategory), id)
}

// FetchAllCategory mocks base method.
func (m *MockCategoryRepository) FetchAllCategory(offset, limit int, filter string) ([]domain.Category, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllCategory", offset, limit, filter)
	ret0, _ := ret[0].([]domain.Category)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAllCategory indicates an expected call of FetchAllCategory.
func (mr *MockCategoryRepositoryMockRecorder) FetchAllCategory(offset, limit, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllCategory", reflect.TypeOf((*MockCategoryRepository)(nil).FetchAllCategory), offset, limit, filter)
}

// FetchCategoryByID mocks base method.
func (m *MockCategoryRepository) FetchCategoryByID(id uuid.UUID) (*domain.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCategoryByID", id)
	ret0, _ := ret[0].(*domain.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCategoryByID indicates an expected call of FetchCategoryByID.
func (mr *MockCategoryRepositoryMockRecorder) FetchCategoryByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCategoryByID", reflect.TypeOf((*MockCategoryRepository)(nil).FetchCategoryByID), id)
}

// UpdateCategory mocks base method.
func (m *MockCategoryRepository) UpdateCategory(id uuid.UUID, request domain.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", id, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockCategoryRepositoryMockRecorder) UpdateCategory(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockCategoryRepository)(nil).UpdateCategory), id, request)
}

// MockWishlistRepository is a mock of WishlistRepository interface.
type MockWishlistRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWishlistRepositoryMockRecorder
}

// MockWishlistRepositoryMockRecorder is the mock recorder for MockWishlistRepository.
type MockWishlistRepositoryMockRecorder struct {
	mock *MockWishlistRepository
}

// NewMockWishlistRepository creates a new mock instance.
func NewMockWishlistRepository(ctrl *gomock.Controller) *MockWishlistRepository {
	mock := &MockWishlistRepository{ctrl: ctrl}
	mock.recorder = &MockWishlistRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWishlistRepository) EXPECT() *MockWishlistRepositoryMockRecorder {
	return m.recorder
}

// CreateWishlist mocks base method.
func (m *MockWishlistRepository) CreateWishlist(wishlist domain.Wishlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWishlist", wishlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWishlist indicates an expected call of CreateWishlist.
func (mr *MockWishlistRepositoryMockRecorder) CreateWishlist(wishlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWishlist", reflect.TypeOf((*MockWishlistRepository)(nil).CreateWishlist), wishlist)
}

// FetchAllWishlistByUserID mocks base method.
func (m *MockWishlistRepository) FetchAllWishlistByUserID(userID, offset, limit int, filter string) ([]domain.Wishlist, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllWishlistByUserID", userID, offset, limit, filter)
	ret0, _ := ret[0].([]domain.Wishlist)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FetchAllWishlistByUserID indicates an expected call of FetchAllWishlistByUserID.
func (mr *MockWishlistRepositoryMockRecorder) FetchAllWishlistByUserID(userID, offset, limit, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllWishlistByUserID", reflect.TypeOf((*MockWishlistRepository)(nil).FetchAllWishlistByUserID), userID, offset, limit, filter)
}

// FetchWishlistByID mocks base method.
func (m *MockWishlistRepository) FetchWishlistByID(id uuid.UUID) (*domain.Wishlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWishlistByID", id)
	ret0, _ := ret[0].(*domain.Wishlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWishlistByID indicates an expected call of FetchWishlistByID.
func (mr *MockWishlistRepositoryMockRecorder) FetchWishlistByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWishlistByID", reflect.TypeOf((*MockWishlistRepository)(nil).FetchWishlistByID), id)
}

// HardDeleteWishlist mocks base method.
func (m *MockWishlistRepository) HardDeleteWishlist(id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HardDeleteWishlist", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// HardDeleteWishlist indicates an expected call of HardDeleteWishlist.
func (mr *MockWishlistRepositoryMockRecorder) HardDeleteWishlist(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HardDeleteWishlist", reflect.TypeOf((*MockWishlistRepository)(nil).HardDeleteWishlist), id)
}
