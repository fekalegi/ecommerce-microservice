// Code generated by MockGen. DO NOT EDIT.
// Source: ProducerInterface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProducerService is a mock of ProducerService interface.
type MockProducerService struct {
	ctrl     *gomock.Controller
	recorder *MockProducerServiceMockRecorder
}

// MockProducerServiceMockRecorder is the mock recorder for MockProducerService.
type MockProducerServiceMockRecorder struct {
	mock *MockProducerService
}

// NewMockProducerService creates a new mock instance.
func NewMockProducerService(ctrl *gomock.Controller) *MockProducerService {
	mock := &MockProducerService{ctrl: ctrl}
	mock.recorder = &MockProducerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerService) EXPECT() *MockProducerServiceMockRecorder {
	return m.recorder
}

// ProduceMessage mocks base method.
func (m *MockProducerService) ProduceMessage(msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProduceMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProduceMessage indicates an expected call of ProduceMessage.
func (mr *MockProducerServiceMockRecorder) ProduceMessage(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProduceMessage", reflect.TypeOf((*MockProducerService)(nil).ProduceMessage), msg)
}
